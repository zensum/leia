buildscript {
    ext.kotlin_version = '1.2.71'
    ext.jvm_version = '1.8'
    ext.junit_platform_version = '1.2.0'
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_platform_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
    }
}

plugins {
    id 'com.google.cloud.tools.jib' version '0.9.7'
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'

group = 'se.zensum'
version = '1.0-SNAPSHOT'
description = 'Receive incoming HTTP requests/webhooks and write them to a Kafka topic'

defaultTasks 'run'

jib {
    to {
        image = "zensum/leia:" + System.getenv("CIRCLE_SHA1")
    }
}

apply plugin: "org.junit.platform.gradle.plugin"
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url "https://jitpack.io" }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:0.30.0'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.30.0'
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    // Junit
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntime "org.junit.platform:junit-platform-launcher:$junit_platform_version"
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    // Integration tests
    integrationTestCompile 'junit:junit:4.12'
    integrationTestCompile "org.testcontainers:testcontainers:1.10.6"

    // Logging
    compile 'io.github.microutils:kotlin-logging:1.6.10'

    // Project specific dependencies (disabled by default)
    compile 'ch.vorburger:fswatch:1.1.0'
    compile 'com.github.zensum:franz:f1e1d92'
    compile 'com.github.zensum:webhook-proto:0.1.2'
    compile 'com.github.zensum:ktor-prometheus-feature:0.6'
    compile 'com.github.zensum:ktor-sentry-feature:cb46084f'
    compile 'com.github.zensum:ktor-jwt:5dc52cb'
    compile 'com.github.zensum:ktor-health-check:e7365fd'
    compile 'io.ktor:ktor-server-core:0.9.5'
    compile 'io.ktor:ktor-server-netty:0.9.5'
    compile "io.ktor:ktor-server-test-host:1.1.2"
    testCompile "io.ktor:ktor-server-test-host:0.9.5"
    compile 'com.moandjiezana.toml:toml4j:0.7.2'
    compile 'com.github.jonross:fauxflake:90abbcf5b6'
    implementation "com.github.mantono:pyttipanna:0.2.0"
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation(group: "com.github.everit-org.json-schema", name: "org.everit.json.schema", version: "1.11.0")
    implementation group: 'redis.clients', name: 'jedis', version: '3.0.1'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"
}

junitPlatform {
    platformVersion = junit_platform_version
    filters {
        engines {
            include 'junit-jupiter'
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': "se.zensum.leia.MainKt"
    }
}

shadowJar {
    baseName = 'shadow'
    classifier = null
    version = null
}

compileKotlin {
    sourceCompatibility = jvm_version
    kotlinOptions {
        jvmTarget = jvm_version
    }
}

compileJava {
    sourceCompatibility = jvm_version
    targetCompatibility = jvm_version
    options.incremental = true
    options.encoding = 'UTF-8'
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

// Important: All classes containing test cases must match the
// the regex pattern "^.*Tests?$" to be picked up by the junit-gradle plugin.
sourceSets {
    main {
        resources.srcDirs += 'src/main/resources'
        kotlin.srcDirs += 'src/main/kotlin'
        java.srcDirs += 'src/main/java'
    }
    test.kotlin.srcDirs += 'src/test/kotlin'
    integrationTest {
        kotlin.srcDirs += 'src/integrationTest/kotlin'
        java.srcDirs += 'src/integrationTest/java'
    }
}

task run(type: JavaExec) {
    main = 'se.zensum.leia.MainKt' //Important that 'Kt' is appended to class name
    classpath = sourceSets.main.runtimeClasspath
}

task debug(type: JavaExec) {
    debug true
    environment "DEBUG", "true"
    main = project.tasks.run.main
    classpath = project.tasks.run.classpath
}

task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts for faster execution'
    gradleVersion = '4.9'
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnit {
        includeCategories 'leia.IntegrationTest'
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
